###############################################################################
# Introduction
# ------------
# We encourage the outside developers to build and share tools to be used by the
# wider neuroscience community. This tutorial focuses not on building extensions,
# which can be found under pynwb, rather focus on core NWB objects that are used
# to build the tools found in hdmf and pynwb.

###############################################################################
# Building from AbstractContainer
# --------------------
# :py:class:`~hdmf.container.AbstractContainer is the base class for all hdmf objects.
# When creating new subclasses, the :py:class:`~hdmf.container.AbstractContainer class
# supports the specfication of __fields__, which are used to add autogenerated attibutes.
# __fields__ will be a tuple of either strings or dictionaries. Typically, attributes that
# are also containers are specfified using a dictionary.
# For :py:class:`~hdmf.container.AbstractContainer, there are three allowable keys when
# using the dciotnary format.

# 1. name: the name of the attribute as a string.
# 2. doc: any documentation regarding the attribute as a string.
# 3. settable: A boolean that determines whether you allow this attribute to be settable from the nwbfile, i.e nwbfile.attribute = ...

# Let's go see an example:
from hdmf.container import AbstractContainer

class my_class(AbstractContainer):

    __fields__ = ({'name': 'attribute1', 'doc': 'documentation', 'settable': False},
                  'attribute2')
# In our example we have both methods of creating attributes. We can either define a dictionary that allows the user
# more control over other parameters, e.g "doc" and "settable", or simply define the name as a stand-alone string.

###############################################################################
# Building from Container
# --------------------
# For :py:class:`~hdmf.container.AbstractContainer, there are three allowable keys when
# using the dciotnary format.

# 1. name:
# 2. doc:
# 3. child:
# 4. required_name:
# 5. settable:

###############################################################################
# Building from Data
# --------------------
#
